{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
{{#imports}}	"{{import}}"
{{/imports}}
)

// Linger please
var (
	_ context.Context
)

type {{classname}}Service service
{{#operation}}

/*
{{{classname}}}Service{{#summary}} {{{.}}}{{/summary}}
{{#notes}}
{{notes}}
{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
{{#allParams}}
{{#required}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}
{{/required}}
{{/allParams}}
{{#hasOptionalParams}}
 * @param optional nil or *{{{nickname}}}ParamOpts - Optional Parameters:
{{#allParams}}
{{^required}}
 * @param "{{vendorExtensions.x-exportParamName}}" ({{#isPrimitiveType}}{{^isBinary}}optional.{{vendorExtensions.x-optionalDataType}}{{/isBinary}}{{#isBinary}}optional.Interface of {{dataType}}{{/isBinary}}{{/isPrimitiveType}}{{^isPrimitiveType}}optional.Interface of {{dataType}}{{/isPrimitiveType}}) - {{#description}} {{{.}}}{{/description}}
{{/required}}
{{/allParams}}
{{/hasOptionalParams}}
{{#returnType}}
@return {{{returnType}}}
{{/returnType}}
*/
{{#hasOptionalParams}}

type {{{nickname}}}ParamOpts struct {
{{#allParams}}
{{^required}}
{{#isPrimitiveType}}
{{^isBinary}}
	{{vendorExtensions.x-exportParamName}} optional.{{vendorExtensions.x-optionalDataType}}
{{/isBinary}}
{{#isBinary}}
	{{vendorExtensions.x-exportParamName}} optional.Interface
{{/isBinary}}
{{/isPrimitiveType}}
{{^isPrimitiveType}}
	{{vendorExtensions.x-exportParamName}} optional.Interface
{{/isPrimitiveType}}
{{/required}}
{{/allParams}}
}
{{/hasOptionalParams}}

func (a *{{{classname}}}Service) {{{nickname}}}(ctx context.Context{{#MultipleRequestMediaType}}, contentType string{{/MultipleRequestMediaType}}{{#hasMultipartRelated}}, multipartBody MultiPart{{/hasMultipartRelated}}{{#hasParams}}, {{/hasParams}}{{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}localVarOptionals *{{{nickname}}}ParamOpts{{/hasOptionalParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}}*http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("{{httpMethod}}")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		{{#returnType}}
		localVarReturnValue  {{{returnType}}}
		{{/returnType}}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	{{#allParams}}
	{{#required}}
	{{#minItems}}
	if len({{paramName}}) < {{minItems}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{paramName}}) > {{maxItems}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{paramName}}) < {{minLength}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{paramName}}) > {{maxLength}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#required}}
	localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	{{/required}}
	{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarQueryParams.Add("{{baseName}}", parameterToString(localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
	{{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}
{{=<% %>=}}
localVarHttpContentTypes := []string{<%#consumes%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/consumes%>}
<%={{ }}=%>
{{#MultipleRequestMediaType}}

    // validate Content-Type
    if contains(localVarHttpContentTypes, contentType) {
    localVarHeaderParams["Content-Type"] = contentType
    } else {
    return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("%s is not valid Content-Type in {{{nickname}}}", contentType)
    }
{{/MultipleRequestMediaType}}
{{^MultipleRequestMediaType}}
    localVarHeaderParams["Content-Type"] = localVarHttpContentTypes[0] // use the first content type specified in 'consumes'
{{/MultipleRequestMediaType}}

	// to determine the Accept header
{{=<% %>=}}
	localVarHttpHeaderAccepts := []string{<%#produces%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/produces%>}
<%={{ }}=%>

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

{{#hasHeaderParams}}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarHeaderParams["{{baseName}}"] = parameterToString(localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
	localVarFormFileName = "{{baseName}}"
{{#required}}
	localVarFile{{baseName}} := {{paramName}}
{{/required}}
{{^required}}
	var localVarFile{{baseName}} {{dataType}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarFileOk := false
		localVarFile{{baseName}}, localVarFileOk = localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value().({{dataType}})
		if !localVarFileOk {
				return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} should be {{dataType}}")
		}
	}
{{/required}}
	if localVarFile{{baseName}} != nil {
		fbs, _ := ioutil.ReadAll(localVarFile{{baseName}})
		localVarFileBytes = fbs
		localVarFileName = localVarFile{{baseName}}.Name()
		localVarFile{{baseName}}.Close()
	}
{{/isFile}}
{{^isFile}}
{{#required}}
	localVarFormParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
{{/required}}
{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarFormParams.Add("{{baseName}}", parameterToString(localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
{{/required}}
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}
	// body params
{{#required}}
	localVarPostBody = &{{paramName}}
{{/required}}
{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		{{#isPrimitiveType}}
		localVarPostBody = localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value()
		{{/isPrimitiveType}}
		{{^isPrimitiveType}}
		localVarOptional{{vendorExtensions.x-exportParamName}}, localVarOptional{{vendorExtensions.x-exportParamName}}ok := localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value().({{{dataType}}})
		if !localVarOptional{{vendorExtensions.x-exportParamName}}ok {
			return {{#returnType}}localVarReturnValue, {{/returnType}}nil, reportError("{{paramName}} should be {{dataType}}")
		}
		localVarPostBody = &localVarOptional{{vendorExtensions.x-exportParamName}}
		{{/isPrimitiveType}}
	}

{{/required}}
{{/bodyParams}}
{{/hasBodyParam}}

{{#authMethods}}
{{#isApiKey}}
{{^isKeyInCookie}}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			{{#isKeyInHeader}}
			localVarHeaderParams["{{keyParamName}}"] = key
			{{/isKeyInHeader}}
			{{#isKeyInQuery}}
			localVarQueryParams.Add("{{keyParamName}}", key)
			{{/isKeyInQuery}}
		}
	}
{{/isKeyInCookie}}
{{/isApiKey}}
{{/authMethods}}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, err
	}

    apiError := GenericOpenAPIError{
    body:  localVarBody,
    error: localVarHttpResponse.Status,
    }

    switch localVarHttpResponse.StatusCode {
    {{#responses}}
    {{#dataType}}
        case {{{code}}}:
        {{#SuccessResponse}}
            err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
            if err != nil {
                apiError.error = err.Error()
            }
            return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, apiError
        {{/SuccessResponse}}
        {{^SuccessResponse}}
            var v {{{dataType}}}
            err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
            if err != nil {
                apiError.error = err.Error()
                return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, apiError
            }
            apiError.model = v
            return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, apiError
        {{/SuccessResponse}}
    {{/dataType}}
    {{/responses}}
    default:
        return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHttpResponse, reportError("%d is not a valid status code in {{{nickname}}}", localVarHttpResponse.StatusCode)
    }
}
{{/operation}}
{{/operations}}
